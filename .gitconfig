# vim: set ts=4 sw=4 sts=4 et :
[user]
    name = Marcin Sobieszczanski
    email = marciso@gmail.com
[push]
    #default = simple
    default = matching
    # default = current
[pull]
    rebase = true
    default = matching
[alias]
    ch = checkout
    co = commit
    cp = cherry-pick
    br = branch
    st = status
    sh = show
    shr = show --pretty=raw
    diff- = diff --cached
    d = diff
    d- = diff --cached
    last = log -1 HEAD
    # you can use the following to do branch diff: git lg feature...master
    l = log
    lp = log -p
    ls = log --stat
    lsp = log -p --stat
    lps = log -p --stat
    lpp = log -p --color-words=.
    ll = log -p --color-words=.
    lpps = log -p --stat --color-words=.
    lspp = log -p --stat --color-words=.
    lpw = log -p --word-diff-regex='[a-zA-Z0-9_]+'
    lpws = log -p --stat --word-diff-regex='[a-zA-Z0-9_]+'
    lspw = log -p --stat --word-diff-regex='[a-zA-Z0-9_]+'
    lg = log --left-right --cherry-mark --pretty=la --graph --abbrev-commit --date=short
    lgs = log --left-right --cherry-mark --pretty=la --graph --abbrev-commit --date=short --stat
    lgl = log --left-right --cherry-mark --graph --stat
    la = log --pretty=la --decorate
    las = log --pretty=la --decorate --stat
    lgb = log --graph --boundary --full-history --simplify-merges
    bf = !git branch -a | grep --color=auto -i
    dd = diff --color-words=.
    dd- = diff --cached --color-words=.
    dw = diff --word-diff-regex='[a-zA-Z0-9_]+'
    dw- = diff --word-diff-regex='[a-zA-Z0-9_]+' --cached
    a = add
    au = add -u
    b = branch
    s = status -uno
    vimdiff = difftool --tool=vimdiff
    vd = difftool --tool=vimdiff --no-prompt
    pl = pull
    pul = pull
    ph = push
    pus = push
    puhs = push
    fe = fetch
    fet = fetch
    mt = mergetool
    r = rebase
    #r-c = rebase --continue
    #r-s = rebase --skip
    #r-a = rebase --abort
    exportfiles = !sh -c 'git diff $0 --name-only | "while read files; do mkdir -p \"$1/$(dirname $files)\"; cp -vf $files $1/$(dirname $files); done"'
[core]
    abbrev = 12
    editor = vim
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    autocrlf = input
    # this is the default git seems to be using if env LESS isn't set
    #pager = less -FRSX
[apply]
    whitespace = nowarn
[branch]
    autosetuprebase = always
[rerere]
    enabled = 1
    # autoupdate = 1
[pack]
    compression = 9
    windowMemory = 100m
    SizeLimit = 100m
    threads = 1
    window = 0
[log]
    date = iso
[pretty]
    lA = tformat:%C(yellow)%H%Creset -%C(bold red)%d%Creset %s %C(bold blue)<%an>%Creset %C(green)%aI%Creset (^:%p)
    la = tformat:%C(yellow)%h%Creset -%C(bold red)%d%Creset %s %C(bold blue)<%an>%Creset %C(green)%aI%Creset (^:%p)
    la-nc = tformat:%h%d %s <%an> %ad
[diff]
    tool = vimdiff
[rebase]
    instructionFormat = %H - %d %s <%an> %aI (^:%p)
[mergetool "diffconflicts"]
    cmd = diffconflicts vim \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
    trustExitCode = true
    keepBackup = false
[mergetool "vimdiff3"]
    cmd = vim -f -d -c \"wincmd J\" \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
[merge]
    #tool = diffconflicts
    tool = vimdiff3
    conflictstyle = diff3
    #default = rebase
    #ff = only
[credential]
    helper = store
[color]
    branch = auto
    diff = auto
    status = auto
    showbranch = auto
    ui = true

# color.branch
#     A boolean to enable/disable color in the output of git-branch(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.interactive
#     When set to always, always use colors for interactive prompts and displays (such as those used by
#     "git-add --interactive"). When false (or never), never. When set to true or auto, use colors only
#     when the output is to the terminal. Defaults to false.

# color.diff
#     Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-
#     diff(1), git-log(1), and git-show(1) will use color for all patches. If it is set to true or
#     auto, those commands will only use color when output is to the terminal. Defaults to false.

#     This does not affect git-format-patch(1) nor the git-diff-* plumbing commands. Can be overridden
#     on the command line with the --color[=<when>] option.

# color.pager
#     A boolean to enable/disable colored output when the pager is in use (default is true).

# color.showbranch
#     A boolean to enable/disable color in the output of git-show-branch(1). May be set to always,
#     false (or never) or auto (or true), in which case colors are used only when the output is to a
#     terminal. Defaults to false.

# color.status
#     A boolean to enable/disable color in the output of git-status(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.ui
#     This variable determines the default value for variables such as color.diff and color.grep that
#     control the use of color per command family. Its scope will expand as more commands learn
#     configuration to set a default for the --color option. Set it to always if you want all output
#     not intended for machine consumption to use color, to true or auto if you want such output to use
#     color when written to the terminal, or to false or never if you prefer git commands not to use
#     color unless enabled explicitly with some other configuration or the --color option.


# color.branch.<slot>
#     Use customized color for branch coloration.  <slot> is one of current (the current branch), local
#     (a local branch), remote (a remote-tracking branch in refs/remotes/), plain (other refs).

#     The value for these configuration variables is a list of colors (at most two) and attributes (at
#     most one), separated by spaces. The colors accepted are:
#       normal, black, red, green, yellow, blue, magenta, cyan and white;
#     the attributes are:
#       bold, dim, ul, blink and reverse.
#
#     The first color given is the foreground; the second is the background.
#     The position of the attribute, if any, doesn't matter.

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

# color.diff.<slot>
#     Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
#     specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
#     func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
#     or whitespace (highlighting whitespace errors). The values of these variables may be specified as
#     in color.branch.<slot>.

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

# color.decorate.<slot>
#     Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
#     stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.

# color.interactive.<slot>
#     Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
#     error, for four distinct types of normal output from interactive commands. The values of these
#     variables may be specified as in color.branch.<slot>.

# color.status.<slot>
#     Use customized color for status colorization.  <slot> is one of header (the header text of the
#     status message), added or updated (files which are added but not committed), changed (files which
#     are changed but not added in the index), untracked (files which are not tracked by git), branch
#     (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
#     red). The values of these variables may be specified as in color.branch.<slot>.

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
