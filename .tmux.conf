# use UTF8
set -g utf8
set-window-option -g utf8 on

# make tmux display things in 256 colors
set-window-option -g xterm-keys on
set -g default-terminal "screen-256color"

# set scrollback history to 100k
set -g history-limit 100000

# set Ctrl-a as the default prefix key combination
# and unbind C-b to free it up
#set -g prefix C-a
#unbind C-b

# use send-prefix to pass C-a through to application
#bind C-a send-prefix

# shorten command delay
set -sg escape-time 0

# The following tells tmux that when 120 control sequences (e.g. new lines)
# per milliseconds are being printed to the screen,
# tmux should change it's update interval to once per 1000 milliseconds (1/sec).
# Note: the defaults takes effect only when reset.
set -g c0-change-trigger 120 #default is 250
set -g c0-change-interval 100 #default is 100

# set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

set -g status-keys vi

# reload ~/.tmux.conf using PREFIX r
bind R source-file ~/.tmux.conf \; display "Reloaded!"

########################################
# default key bindings:
########################################
#bind-key ?      # list all key bindings. This one is key
#bind-key s      # list and choose session
#bind-key w      # list and choose window in session
#bind-key $      # rename session
#bind-key ,      # rename window
#bind-key c      # new window within session
#bind-key n      # change window within session
#bind-key {      # swap pane -U
#bind-key }      # swap pane -D
#bind-key [      # enter copy mode and you can scroll with j k up down
#bind-key q      # leave copy mode
#bind-key x      # kill a pane with y/n
#bind-key space  # next-layout (swap the split layout)
#bind-key '      # give a command-prompt and you can input a window index or name
#bind-key %      # Split the current pane into two, left and right.
#bind-key "      # Split the current pane into two, top and bottom.


# use PREFIX | to split window horizontally and PREFIX - to split vertically
bind | split-window -h
bind - split-window -v

# Alt s/v to split windows
bind -n M-- split-window -v
bind -n M-_ split-window -h
bind -n M-| split-window -h

# Make the current window the first window
bind T swap-window -t 1

# map Vi movement keys as pane movement keys
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# and use C-h and C-l to cycle thru panes
#bind -r C-h select-window -t :-
#bind -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# Keep your finger on ctrl, or don't, same result
bind-key C-d detach-client
bind-key C-c new-window
bind-key C-p paste-buffer

# Use Alt-vim keys without prefix key to switch panes
#bind -n M-h select-pane -L
#bind -n M-j select-pane -D
#bind -n M-k select-pane -U
#bind -n M-l select-pane -R

# Smart pane switching with awareness of vim splits
#is_vim='echo "#{pane_current_command}" | grep -iE "(^|\/)g?(view|n?vim?)(diff)?$"'
# REQUIRES tmux >= 1.8 (tested with 1.9a)
bind -n M-Left  if '[[ "#{pane_current_command}" =~ vim|view|vimdiff ]]' 'send-keys C-h' 'select-pane -L'
bind -n M-Down  if '[[ "#{pane_current_command}" =~ vim|view|vimdiff ]]' 'send-keys C-j' 'select-pane -D'
bind -n M-Up    if '[[ "#{pane_current_command}" =~ vim|view|vimdiff ]]' 'send-keys C-k' 'select-pane -U'
bind -n M-Right if '[[ "#{pane_current_command}" =~ vim|view|vimdiff ]]' 'send-keys C-l' 'select-pane -R'
#bind -n M-\     if '[[ "#{pane_current_command}" =~ "vim|view|vimdiff" ]]' 'send-keys C-\\' 'select-pane -l'
#bind -n M-s display "#{pane_current_command}"

# Use Alt-arrow keys without prefix key to switch panes
#bind -n M-Left select-pane -L
#bind -n M-Right select-pane -R
#bind -n M-Up select-pane -U
#bind -n M-Down select-pane -D


bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

bind -n M-T send-key -l "printf \"\\033k\$USER@\$( (hostname -s||uname -n) 2>/dev/null )\\033\\\\\"\n"
bind -n M-C send-key -l "PROMPT_COMMAND='history -a;echo -en \"\\033[m\\033[38;5;2m\"$(( $(sed -nu \"s/MemFree:[\\t ]\\+\\([0-9]\\+\\) kB/\\1/p\" /proc/meminfo)/1024))\"\\033[38;5;22m/\"$(($(sed -nu \"s/MemTotal:[\\t ]\\+\\([0-9]\\+\\) kB/\\1/Ip\" /proc/meminfo)/1024 ))MB\"\\t\\033[m\\033[38;5;55m$(< /proc/loadavg) \\t\\033[m\\033[0;36m$(date)\\033[m\"' PS1='\\[\\e[m\\n\\e[0;36m\\][\\j:\\!]\\[\\e[0;36m\\]\\[\\e[0;36m\\][\\[\\e[0;33m\\]\\u@\\H\\[\\e[0;36m\\]:\\[\\e[0;37m\\]\${SSH_TTY} \\[\\e[0;32m\\]+\${SHLVL}\\[\\e[0;36m\\]] \\[\\e[1;37m\\]\\w\\[\\e[0;37m\\] \\n$(if \[\[ \$? == 0 \]\]; then echo \"\\[\\033[0;32m\\]^_^\"; else echo \"\\[\\033[0;31m\\]O_O\"; fi)\\[\\033[00m\\] \\[\\e[0;35m\\]\\u \\[\\e[0;37m\\]\\$ '; export LS_COLORS=\"$MS_LS_COLORS_SMALL\" ; set -o vi ; alias ls='ls -F --color=auto'; alias la='ls -AFrt' ; alias lal='ls -AlFrt' ; alias ls-ltr='ls -ltr' ; alias ls-tlr='ls -ltr' ; alias ls-la='ls -la' ; alias ls-l='ls -l' ; alias ls-a='ls -a' ; alias rgrep='grep -rn' ; alias today=\"date +'%Y%m%d'\" ; alias B='cd \$EMM_BASE' ; alias d='dirs -v' ; alias p=pushd ; alias b=popd ; alias xless='less -CxQai4' ; alias LL='xless `ls -1tr | tail -1`' ; source ~/.emmlocal "


bind -n M-G send-key -l "ps -ae -o user,pid,tid,cgroup:14,class,rtprio:3,ni,pri,psr,pcpu,cputime,pmem,vsz:8,rss:8,stat,wchan:20,maj_flt:6,min_flt:8,stime,cmd -L |sort -k10n,10 -k12n,12"

bind -n M-z resize-pane -Z

# M-[ is also generated by Home/End keys

# Alt-q/w to switch windows
bind -n M-q previous-window
bind -n M-w next-window
bind -n M-e choose-window

bind -n M-n new-window
bind -n M-m command-prompt "new-window -n %1 'ssh %1'"

bind -n M-X set -g mode-mouse on \; \
    set -g mouse-resize-pane on \; \
    set -g mouse-select-pane on \; \
    set -g mouse-select-window on \; \
    display 'Mouse: On'

bind -n M-x set -g mode-mouse off \; \
    set -g mouse-resize-pane off \; \
    set -g mouse-select-pane off \; \
    set -g mouse-select-window off \; \
    display 'Mouse: Off'

# set mouse explicitly
setw -g mode-mouse on
# being able to select panes is nice feature but it doesn't play well with text selection
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# ---------------------
# Copy & Paste
# ---------------------
# provide access to the clipboard for pbpaste, pbcopy
#set-option -g default-command "reattach-to-user-namespace -l zsh"
#set-window-option -g automatic-rename on

# Do not automatically set window title
set-window-option -g automatic-rename off
#set-option -g allow-rename off

# use vim keybindings in copy mode
setw -g mode-keys vi

# setup 'v' to begin selection as in Vim
bind -t vi-copy v begin-selection
bind -t vi-copy V rectangle-toggle
bind -t vi-copy y copy-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# update default binding of 'Enter' to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

#bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
#bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '

# ----------------------
# set some pretty colors
# ----------------------
# set pane colors - hilight the active pane
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour230 #base01

# colorize messages in the command line
set-option -g message-bg black #base02
set-option -g message-fg brightred #orange

# ----------------------
# Status Bar
# -----------------------
set-option -g status on                # turn the status bar on
set -g status-utf8 on                  # set utf-8 for the status bar
set -g status-interval 1               # set update frequency (default 15 seconds)
set -g status-justify left             # center window list for clarity
# set-option -g status-position top    # position the status bar at top of screen

# visual notification of activity in other windows
setw -g monitor-activity on

# switch off visual activity, so no messages are printed on the status bar (only color changes)
set -g visual-activity off

# set color for status bar
set-option -g status-bg colour235
set-option -g status-fg yellow
set-option -g status-attr dim

# set window list colors - red for active and green for inactive
set-window-option -g window-status-bg green
set-window-option -g window-status-fg black #base0
set-window-option -g window-status-attr dim

set-window-option -g window-status-current-bg red
set-window-option -g window-status-current-fg white #orange
set-window-option -g window-status-current-attr bright

set-window-option -g window-status-activity-bg yellow
set-window-option -g window-status-activity-fg black
set-window-option -g window-status-activity-attr bold

# show host name and IP address on left side of status bar
set -g status-left-length 40
#set -g status-left "#[fg=green]:#h:#[fg=yellow]#(ip addr show eth0 | grep 'inet ' | awk '{print \"eth0\",$2}') #(ip addr show eth1 | grep 'inet ' | awk '{print \"eth1\",$2}') #(ip addr show eth2 | grep 'inet ' | awk '{print \"eth2\",$2}') #(ip addr show eth3 | grep 'inet ' | awk '{print \"eth3\",$2}') "
set -g status-left "#[fg=yellow][#S][#I:#P]"

# show session name, window & pane number, date and time on right side of
# status bar
set -g status-right-length 185
#set -g status-right "#[fg=yellow]#100T #[fg=green]#10h #[bg=blue]#[fg=white]#(cat /proc/loadavg|cut -d\' \' -f1-3)#[fg=green,bg=black] %F %H:%M %s"
set -g status-right "#[fg=yellow]#100T #[fg=green]#12h #[default]#(tmux-mem-cpu-load)#[fg=green,bg=black] %F %H:%M %s"


set -g @shell_mode 'vi'

# Tmux Plugin Manager
#  Check: https://github.com/tmux-plugins
#
# Key bindings:
# prefix + I
#    installs new plugins from github or any other git repo
#    refreshes TMUX environment
# prefix + U
#    updates plugin(s)
# prefix + alt + u
#    remove/uninstall plugins not on the plugin list

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# tmux-sensible - A set of tmux options that should be acceptable to everyone.
#set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-sidebar'

# tmux-copycat - a plugin for regex searches in tmux and fast match selection
# Key bindings:
# 	prefix + / 		- regex search (strings work too)
# 	prefix + ctrl-f 	- simple file search
# 	prefix + ctrl-g 	- jumping over git status files (best used after git status command)
# 	prefix + alt-h 	- jumping over SHA-1 hashes (best used after git log command)
# 	prefix + ctrl-u 	- url search (http, ftp and git urls)
# 	prefix + ctrl-d 	- number search (mnemonic d, as digit)
# 	prefix + alt-i 	- ip address search
set -g @plugin 'tmux-plugins/tmux-copycat'

# tmux-open - opening highlighted selection directly from Tmux copy mode
# Key bindings in tmux copy mode:
#	o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
# 	Ctrl-o - open a highlighted selection with the $EDITOR
set -g @plugin 'tmux-plugins/tmux-open'

# tmux-yank - copying to system clipboard in Tmux.
# NOTE: requires xclip OR xsel command (e.g.: sudo yum install xsel)
# Key bindings:
# 	prefix + y - copies text from the command line to clipboard.
# 	prefix + Y (shift-y) - copy pane current working directory to clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# tmux-ressurect - restore tmux environment after system restart.
# Key Bindings:
#   prefix + Ctrl-s - save
#   prefix + Ctrl-r - restore
set -g @plugin 'tmux-plugins/tmux-resurrect'

# tmux-loggging - logging sessions, screen capture, save pane history
# 	prefix + shift + p - toggle logging,
# 					$HOME/tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
# 	prefix + alt + p - visible text in the current pane is saved to a file
#					$HOME/tmux-screen-capture-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
# 	prefix + alt + shift + p - Saves complete pane history to a file
#					$HOME/tmux-history-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log
set -g @plugin 'tmux-plugins/tmux-logging'

# Other examples for Tmux Plugin Manager:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

